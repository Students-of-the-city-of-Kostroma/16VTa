char razdelznak = '_';
	char vihod[100];
	char stek[100];
	int j = 0, m = 0, i = 0;
	int otvet;
	char perem;
	int len;


	len = strlen(a);

	while ((i < len) && (a[i] != '0' || a[i] != '='))
	{
		if (a[i] >= '0' && a[i] <= '9' || a[i] == '.')
		{
			vihod[m] = a[i];
			m++;
		}


		//////////Для числа с Е
		else if (a[i] == 'e')
		{
			vihod[m] = a[i];
			vihod[m + 1] = a[i + 1];
			vihod[m + 2] = a[i + 2];
			m = m + 3;
			i = i + 2;
		}
		

		else if (a[i] == '+' || a[i] == '-' || a[i] == '/' || a[i] == '*')
		{
			if (j == 0)
			{
				vihod[m] = razdelznak;
				m++;
				stek[j] = a[i];
				j++;
			}
			else
			{
				if (prioritet(stek[j - 1]) < prioritet(a[i]))
				{
					vihod[m] = razdelznak;
					m++;
					stek[j] = a[i];
					j++;
				}
				else//если пpиоpитет меньше пеpеписываем в выходную стpоку все опеpации с большим или pавным пpиоpитетом записываем в стек поступившую опеpацию
				{
					vihod[m] = razdelznak;
					m++;
					while (j >= 1 && prioritet(stek[j - 1]) >= prioritet(a[i]))
					{
						vihod[m] = stek[j - 1];
						m++;
						j--;
					}
					stek[j] = a[i];
					++j;
				}
			}
		}
		i++;
	}



	--j;
	vihod[m] = razdelznak;
	m++;
	while (j >= 0)
	{
		vihod[m] = stek[j];
		++m;
		--j;
	}
	vihod[m] = '\0';

int prioritet(char a)
{
	switch (a)
	{
	case '*':
	case '/':
		return 3;
	case '-':
	case '+':
		return 2;

	}
}
